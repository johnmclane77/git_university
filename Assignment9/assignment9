
# define a new class that is based on turtle

def menu(selection):
  if selection == "n":
    newName = raw_input("Please name your new turtle: ")
    parent.makeNewTurtle(newName)
  elif selection == "r":
    parent.allTurnRight()
    parent.turnRight()
  elif selection == "l":
    parent.allTurnLeft()
    parent.turnLeft()
  elif selection == "m":
    parent.moveForward()
    parent.forward()
  elif selection == "s":
    newName = raw_input("Please name your new SLOW turtle: ")
    parent.makeSlowTurtle(newName)
  elif selection == "g":
    parent.greetChildren()

class ParentTurtle(Turtle):

  def __init__ (self, home):
    Turtle.__init__(self,home)  
    self.children = []
    self.home = home
    self.setName("Mum")
    
  def makeNewTurtle(self,name):
    newborn = Turtle(self.home)
    newborn.setName(name)
    self.children.append(newborn)
    return newborn
    
  def makeSlowTurtle(self,name):
    newborn = slowTurtle(self.home)
    newborn.setName(name)
    self.children.append(newborn)
    return newborn            

  def makeAdventurousTurtle(self,name):
    newborn = adventurousTurtle(self.home)
    newborn.setName(name)
    self.children.append(newborn)
    return newborn  

  def greetChildren(self):
    for child in self.children:
      printNow ("Hi " + (child.name))
      
  def allTurnRight(self):
    for child in self.children:
      child.turnRight()
     
  def allTurnLeft(self):
    for child in self.children:
      child.turnLeft()
      
  def moveForward(self):
    for child in self.children:
      #child.forward(100)
      child.forward()
     
class slowTurtle(Turtle):
#  def forward(self,num):
#    Turtle.forward(self,num/2)
  def forward(self):
    Turtle.forward(self,50)

#class adventurousTurtle(Turtle):
#  def roam(self):
    

earth = makeWorld()
parent = ParentTurtle(earth)

while True:
  selection = raw_input("Please enter selection: ").lower()
  if selection == "q":
    break
  menu(selection)

quit